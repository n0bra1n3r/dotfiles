#! /bin/sh

local INFO_MSG="INFO"
local ERROR_MSG="ERROR"

local BRANCH="$1"

local GIT_DIR="$(git rev-parse --show-toplevel)"

local WORKSPACE_BRANCH="${WORKSPACE_BRANCH:-staging}"

local THIS_BRANCH=
local WORKSPACE_BRANCH=
local WORKSPACE_DEFAULT_DIR=
local WORKSPACE_ROOT_DIR=

if [ -z "$GIT_DIR" ]; then
  echo "$ERROR_MSG: this script must be run in a git directory"
  return 1
else
  [ -z "$MSYSTEM" ] || GIT_DIR="$(cygpath -u "$GIT_DIR")"

  THIS_BRANCH="$(git branch --show-current)"

  for branch in $WORKSPACE_BRANCH main master; do
    if git show-ref --quiet refs/heads/$branch; then
      WORKSPACE_BRANCH="$branch"
      break
    fi
    WORKSPACE_BRANCH=
  done

  if [ -z "$WORKSPACE_BRANCH" ]; then
    echo "$ERROR_MSG: could not find default branch"
    return 1
  else
    echo "$INFO_MSG: using '$WORKSPACE_BRANCH' as default branch"
  fi

  if [ -z "$WORKSPACE_ROOT_DIR" ]; then
    WORKSPACE_DEFAULT_DIR="$(git worktree list --porcelain | \
      grep "^worktree .*$WORKSPACE_BRANCH$" | \
      cut -d' ' -f2)"
    if [ ! -z "$WORKSPACE_DEFAULT_DIR" ]; then
        if [ -z "$MSYSTEM" ]; then
          WORKSPACE_DEFAULT_DIR="$(cygpath -u "$WORKSPACE_DEFAULT_DIR")"
        fi
        WORKSPACE_ROOT_DIR="${WORKSPACE_DEFAULT_DIR%/$WORKSPACE_BRANCH}"
    fi
  fi
  if [ -z "$WORKSPACE_ROOT_DIR" ] || \
     [ ! -z "$WORKSPACE_DEFAULT_DIR" ] && \
     [ ! -d "$WORKSPACE_ROOT_DIR/$THIS_BRANCH" ]
  then
    WORKSPACE_ROOT_DIR="$(dirname $PWD)/ws-$(basename $PWD)"
  else
    echo "$INFO_MSG: found workspace root at '$WORKSPACE_ROOT_DIR'"
  fi

  if [ ! -d "$WORKSPACE_ROOT_DIR" ]; then
    if [ -t 0 ]; then
      read -p "Initialize default workspace at '$WORKSPACE_ROOT_DIR/$WORKSPACE_BRANCH'? [Y/n] " DO_CREATE_WORKSPACE
      if [ ! -z "${DO_CREATE_WORKSPACE#[Yy]}" ]; then
        return 0
      fi
    else
      echo "$INFO_MSG: initializing default workspace at '$WORKSPACE_ROOT_DIR/$WORKSPACE_BRANCH'"
    fi
    mkdir -p "$WORKSPACE_ROOT_DIR/$(dirname $WORKSPACE_BRANCH)"
    cp -r "$GIT_DIR" "$WORKSPACE_ROOT_DIR/$WORKSPACE_BRANCH"
    cd "$WORKSPACE_ROOT_DIR/$WORKSPACE_BRANCH"
    git switch $WORKSPACE_BRANCH
  fi
fi

if [ ! -d "$WORKSPACE_ROOT_DIR/$BRANCH" ]; then
  if [ ! -z "$WORKSPACE_DEFAULT_DIR" ]; then
    if [ -t 0 ]; then
      # confirm intent if WORKSPACE_ROOT_DIR was guessed
      read -p "Create workspace at '$WORKSPACE_ROOT_DIR/$BRANCH'? [Y/n] " DO_CREATE_WORKSPACE
      if [ ! -z "${DO_CREATE_WORKSPACE#[Yy]}" ]; then
        return 0
      fi
    else
      echo "$INFO_MSG: creating workspace at '$WORKSPACE_ROOT_DIR/$WORKSPACE_BRANCH'"
    fi
  fi

  cd "$WORKSPACE_ROOT_DIR/$WORKSPACE_BRANCH"

  git worktree prune

  if git show-ref --verify --quiet refs/heads/$BRANCH; then
    echo "$INFO_MSG: found local branch '$BRANCH'"
    git worktree add "$WORKSPACE_ROOT_DIR/$BRANCH" $BRANCH
  else
    if git ls-remote --exit-code --heads origin $BRANCH >/dev/null; then
      echo "$INFO_MSG: found remote branch '$BRANCH'"
      git fetch origin $BRANCH
      git worktree add "$WORKSPACE_ROOT_DIR/$BRANCH" $BRANCH
    else
      echo "$INFO_MSG: creating new branch '$BRANCH'"
      git worktree add --track -b $BRANCH "$WORKSPACE_ROOT_DIR/$BRANCH"
    fi
  fi

  echo "$INFO_MSG: created workspace at '$WORKSPACE_ROOT_DIR/$BRANCH'"
else
  echo "$INFO_MSG: found workspace at '$WORKSPACE_ROOT_DIR/$BRANCH'"
fi

cd "$WORKSPACE_ROOT_DIR/$BRANCH"
