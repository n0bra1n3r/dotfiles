#! /bin/sh

set -e

WORKSPACE_BRANCH="${WORKSPACE_BRANCH:-staging}"
WORKSPACE_EDITOR="${WORKSPACE_EDITOR:-${EDITOR:-nvim}}"

BRANCH="$1"

GIT_DIR="$(git rev-parse --show-toplevel)"

if [ $? -ne 0 ]; then
  echo "error: this script must be run in a git directory"
  exit 1
else
  [ -z "$MSYSTEM" ] || GIT_DIR="$(cygpath -u "$GIT_DIR")"

  THIS_BRANCH="$(git branch --show-current)"

  if ! git show-ref --quiet refs/heads/$WORKSPACE_BRANCH; then
    echo "error: default branch '$WORKSPACE_BRANCH' does not exist"
    exit 1
  fi

  if [ -z "$WORKSPACE_ROOT_DIR" ]; then
    WORKSPACE_DEFAULT_DIR="$(git worktree list --porcelain | \
      grep "^worktree .*$WORKSPACE_BRANCH$" | \
      cut -d' ' -f2)"
    if [ ! -z WORKSPACE_DEFAULT_DIR ]; then
        [ -z "$MSYSTEM" ] ||
          WORKSPACE_DEFAULT_DIR="$(cygpath -u "$WORKSPACE_DEFAULT_DIR")"
        WORKSPACE_ROOT_DIR="${WORKSPACE_DEFAULT_DIR%$WORKSPACE_BRANCH}"
    fi
  fi
  if [ -z "$WORKSPACE_ROOT_DIR" ] || \
     [ ! -z "$WORKSPACE_DEFAULT_DIR" ] && \
     [ ! -d "$WORKSPACE_ROOT_DIR/$THIS_BRANCH" ]
  then
    WORKSPACE_ROOT_DIR="$(dirname $PWD)/ws-$(basename $PWD)"
  else
    echo "info: found workspace root at '$WORKSPACE_ROOT_DIR'"
  fi

  if [ ! -d "$WORKSPACE_ROOT_DIR" ]; then
    read -p "Initialize default workspace at '$WORKSPACE_ROOT_DIR/$WORKSPACE_BRANCH'? [Y/n] " DO_CREATE_WORKSPACE
    if [ "$DO_CREATE_WORKSPACE" != "${DO_CREATE_WORKSPACE#[Yy]}" ]; then
      exit
    fi
    mkdir -p "$WORKSPACE_ROOT_DIR/$(dirname $WORKSPACE_BRANCH)"
    cp -r "$GIT_DIR" "$WORKSPACE_ROOT_DIR/$WORKSPACE_BRANCH"
    cd "$WORKSPACE_ROOT_DIR/$WORKSPACE_BRANCH"
    git switch $WORKSPACE_BRANCH
  fi
fi

if [ ! -d "$WORKSPACE_ROOT_DIR/$BRANCH" ]; then
  if [ ! -z "$WORKSPACE_DEFAULT_DIR" ]; then
    # confirm intent if WORKSPACE_ROOT_DIR was guessed
    read -p "Create workspace at '$WORKSPACE_ROOT_DIR/$BRANCH'? [Y/n] " DO_CREATE_WORKSPACE
    if [ "$DO_CREATE_WORKSPACE" != "${DO_CREATE_WORKSPACE#[Yy]}" ]; then
      exit
    fi
  fi

  cd "$WORKSPACE_ROOT_DIR/$WORKSPACE_BRANCH"

  git worktree prune

  if git show-ref --verify --quiet refs/heads/$BRANCH; then
    echo "info: Found local branch $BRANCH"
    git worktree add "$WORKSPACE_ROOT_DIR/$BRANCH" $BRANCH
  else
    if git ls-remote --exit-code --heads origin $BRANCH >/dev/null; then
      echo "info: Found remote branch $BRANCH"
      git fetch origin $BRANCH
      git worktree add "$WORKSPACE_ROOT_DIR/$BRANCH" $BRANCH
    else
      echo "info: Creating new branch $BRANCH"
      git worktree add --track -b $BRANCH "$WORKSPACE_ROOT_DIR/$BRANCH"
    fi
  fi

  cd "$WORKSPACE_ROOT_DIR/$BRANCH"
fi

$WORKSPACE_EDITOR "$WORKSPACE_ROOT_DIR/$BRANCH"
