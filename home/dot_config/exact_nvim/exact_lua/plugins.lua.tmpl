-- vim: filetype=lua fcl=all fdm=marker fdl=0 fen
-- chezmoi:template:left-delimiter="<<" right-delimiter=">>"

my_plugins {
  --{{{ Misc
  { 'echasnovski/mini.bufremove' },
  { 'echasnovski/mini.misc' },
  { 'kyazdani42/nvim-web-devicons' },
  { 'nvim-lua/plenary.nvim' },
  { 'kevinhwang91/promise-async' },
  { 'kkharji/sqlite.lua' },
  --}}}
  --{{{ UI
  { 'stevearc/dressing.nvim', lazy = false },
  { 'folke/edgy.nvim', event = 'VeryLazy' },
  { 'rebelot/heirline.nvim', lazy = false },
  { 'catppuccin/nvim', name = 'catppuccin.nvim', lazy = false, priority = 1000 },
  { 'kevinhwang91/nvim-ufo', lazy = false,
    dependencies = { 'kevinhwang91/promise-async' },
  },
  { 'MunifTanjim/nui.nvim' },
  { 'luukvbaal/statuscol.nvim', lazy = false },

  -- animations
  { 'karb94/neoscroll.nvim', event = 'BufRead' },

  -- notifications
  { 'j-hui/fidget.nvim', lazy = false },

  -- quickfix
  { 'kevinhwang91/nvim-bqf', ft = 'qf' },
  { 'https://gitlab.com/yorickpeterse/nvim-pqf.git', lazy = false },
  --}}}
  --{{{ Mappings
  { 'folke/which-key.nvim', event = 'VeryLazy' },
  --}}}
  --{{{ Terminal
  { 'willothy/flatten.nvim', lazy = false, priority = 1001 },
  {
    'akinsho/toggleterm.nvim',
    cmd = {
      'ToggleTerm',
      'ToggleTermToggleAll',
      'TermExec',
      'ToggleTermSetName',
    },
  },
  --}}}
  --{{{ Frameworks
  { 'akinsho/flutter-tools.nvim', lazy = false },
  {
    'nvim-neorg/neorg',
    build = ':Neorg sync-parsers',
    ft = 'norg',
    cmd = 'Neorg',
    dependencies = { 'nvim-treesitter/nvim-treesitter' },
  },
  --}}}
  --{{{ Motions
  { 'numToStr/Comment.nvim', event = { 'BufRead', 'BufModifiedSet' } },
  { 'folke/flash.nvim', event = 'VeryLazy' },
  { 'echasnovski/mini.splitjoin', event = 'BufRead' },
  { 'chrisgrieser/nvim-spider', event = { 'BufRead', 'BufModifiedSet' } },
  { 'chrisgrieser/nvim-various-textobjs', event = { 'BufRead', 'BufModifiedSet' } },
  { 'cbochs/portal.nvim', event = 'VeryLazy' },
  { 'haya14busa/vim-asterisk', event = { 'BufRead', 'BufModifiedSet' } },
  { 'andymass/vim-matchup', lazy = false },
  { 'tpope/vim-repeat', event = 'BufModifiedSet' },
  { 'tpope/vim-surround', event = { 'BufRead', 'BufModifiedSet' } },
  { 'mg979/vim-visual-multi', event = { 'BufRead', 'BufModifiedSet' } },
  --}}}
  --{{{ Navigation
  { 'cbochs/grapple.nvim' },
  {
    'nvim-telescope/telescope.nvim',
    event = 'VeryLazy',
    dependencies = {
      'nvim-telescope/telescope-dap.nvim',
      'nvim-telescope/telescope-fzf-native.nvim',
      'nvim-telescope/telescope-smart-history.nvim',
    },
  },
  { 'nvim-telescope/telescope-dap.nvim' },
  {
    'nvim-telescope/telescope-fzf-native.nvim',
--<- if eq .chezmoi.os "windows" >--
    ---@diagnostic disable-next-line: duplicate-index
    build = 'cmake -S. -Bbuild -DCMAKE_BUILD_TYPE=Release && cmake --build build --config Release && cmake --install build --prefix build',
--<- else if eq .chezmoi.os "darwin" >--
    ---@diagnostic disable-next-line: duplicate-index
    build = 'make',
--<- end >--
  },
  {
    'nvim-telescope/telescope-smart-history.nvim',
    dependencies = { 'kkharji/sqlite.lua' },
  },
  --}}}
  --{{{ VCS
  { 'sindrets/diffview.nvim', cmd = { 'DiffviewFileHistory', 'DiffviewOpen' } },
  { 'akinsho/git-conflict.nvim', event = 'VeryLazy' },
  { 'lewis6991/gitsigns.nvim', event = 'BufRead' },
  --}}}
  --{{{ Package Management
  {
    'williamboman/mason.nvim',
    build = {
      ':MasonUpdate',
      ':MasonInstall actionlint',
      ':MasonInstall codelldb',
      ':MasonInstall dart-debug-adapter',
      ':MasonInstall shellcheck',
    },
  },
  {
    'williamboman/mason-lspconfig.nvim',
    dependencies = { 'williamboman/mason.nvim' },
  },
  --}}}
  --{{{ Syntax Highlighting
  {
    'nvim-treesitter/nvim-treesitter',
    build = { ':TSUpdate' },
    cmd = { 'TSInstall', 'TSInstallSync', 'TSUninstall', 'TSUpdate' },
    event = 'BufRead',
  },
  {
    'nvim-treesitter/nvim-treesitter-context',
    dependencies = { 'nvim-treesitter/nvim-treesitter' },
    event = 'BufRead',
  },
  {
    'nvim-treesitter/nvim-treesitter-refactor',
    dependencies = { 'nvim-treesitter/nvim-treesitter' },
    event = 'BufRead',
  },
  --}}}
  --{{{ Language Servers
  { 'L3MON4D3/LuaSnip' },
  { 'rafamadriz/friendly-snippets' },

  { 'VonHeikemen/lsp-zero.nvim' },

  { 'nvimtools/none-ls.nvim', event = 'BufRead' },
  { 'alaviss/nim.nvim', ft = 'nim' },

  { 'hrsh7th/cmp-buffer' },
  { 'hrsh7th/cmp-cmdline' },
  { 'rcarriga/cmp-dap' },
  { 'hrsh7th/cmp-nvim-lsp' },
  { 'hrsh7th/cmp-nvim-lsp-signature-help' },
  { 'hrsh7th/cmp-nvim-lua' },
  { 'hrsh7th/cmp-path' },
  { 'saadparwaiz1/cmp_luasnip', dependencies = { 'L3MON4D3/LuaSnip' } },
  {
    'hrsh7th/nvim-cmp',
    event = { 'InsertEnter', 'CmdlineEnter' },
    dependencies = {
      'hrsh7th/cmp-nvim-lsp-signature-help',
      'hrsh7th/cmp-buffer',
      'hrsh7th/cmp-cmdline',
      'rcarriga/cmp-dap',
      'hrsh7th/cmp-path',
      'saadparwaiz1/cmp_luasnip',
      'hrsh7th/cmp-nvim-lua',
    },
  },
  {
    'neovim/nvim-lspconfig',
    cmd = "LspInfo",
    event = { 'BufRead', 'BufNewFile' },
    dependencies = {
      "hrsh7th/cmp-nvim-lsp",
      "williamboman/mason-lspconfig.nvim",
    },
  },

  {
    'windwp/nvim-autopairs',
    event = 'InsertEnter',
    dependencies = { 'hrsh7th/nvim-cmp' },
  },
  --}}}
  --{{{ Assistants
  { 'Robitx/gp.nvim', event = 'BufRead' },
  --}}}
  --{{{ Editor
  {
    'echasnovski/mini.trailspace',
    event = {
      'BufRead',
      'BufModifiedSet',
      'BufWritePre',
      'FileWritePre',
    },
  },
  { 'echasnovski/mini.indentscope', event = { 'BufRead', 'BufModifiedSet' } },
  --}}}
  --{{{ Tasks
  {
    'stevearc/overseer.nvim',
    dependencies = { 'mfussenegger/nvim-dap' },
  },
  --}}}
  --{{{ Debuggers
  { 'mfussenegger/nvim-dap' },
  { 'rcarriga/nvim-dap-ui', dependencies = { 'mfussenegger/nvim-dap' } },
  {
    'theHamsta/nvim-dap-virtual-text',
    dependencies = {
      'mfussenegger/nvim-dap',
      'nvim-treesitter/nvim-treesitter',
    },
  },
  --}}}
  --{{{ Workspace
  { 'klen/nvim-config-local', lazy = false },

  {
    'andythigpen/nvim-coverage',
    cmd = {
      'Coverage',
      'CoverageLoad',
      'CoverageLoadLcov',
      'CoverageClear',
    },
    dependencies = { 'nvim-lua/plenary.nvim' }
  },
  --}}}
}
