#!/usr/bin/env bash
# chezmoi:template:left-delimiter="#{" right-delimiter="}#"

printf '\033[?12l' # disable cursor blink

export HISTSIZE=10000

if [[ -n "$STARSHIP_CONFIG" ]]; then
  STARSHIP_CONFIG="$(eval echo "$STARSHIP_CONFIG")"
  export STARSHIP_CONFIG
fi

# Overrides

alias cat='bat'
alias ls='eza'

#{- if eq .chezmoi.os "windows" }#
alias npm="cmd -c npm.cmd"
#{- else if eq .chezmoi.os "darwin" }#
alias pip="\$(brew --prefix)/bin/pip3"
alias python="\$(brew --prefix)/bin/python3"
alias studio="open -a /Applications/Android\ Studio.app"
#{- end }#

function cygpath() {
  if [[ "$OS" == *_NT* ]]; then
    command cygpath "$@"
  else
    for last in "$@"; do :; done
    echo "$last"
  fi
}

function _silent_background() {
  ("$@" &>/dev/null &)
}

if [[ -n "$NVIM" ]]; then
  function _nvim_remote() {
    command nvim --clean --headless --server "$NVIM" "$@"
  }

  function cd() {
    local dir
    builtin cd "$@" && ls -a "$PWD" || return $?
    dir="$(cygpath -m "$PWD")"
    _silent_background _nvim_remote --remote-expr \
      "v:lua.fn.set_terminal_dir(\"$dir\")"
  }

  function git() {
    command git "$@" || return $?
    _silent_background _nvim_remote --remote-expr "v:lua.fn.refresh_git_info()"
  }

  function workspace() {
    # shellcheck disable=1091
    source "$HOME/.dotfiles/scripts/workspace"
    nvim
  }

  function exit() {
    _nvim_remote --remote-send "<cmd>quitall<CR>"
  }
else
  function cd() {
    builtin cd "$@" && ls -a "$PWD"
  }

  function git() {
    command git "$@"
  }

  # shellcheck disable=2120
  function nvim() {
    if [[ $# -eq 0 ]]; then
      command nvim +"TerminalModeStart nvim"
    else
      command nvim "$@"
    fi
  }

  function workspace() {
    # shellcheck disable=1091
    source "$HOME/.dotfiles/scripts/workspace"
  }
fi

function _fzf_complete_workspace() {
  local current

  current="$(command git branch --show-current 2>/dev/null)"

  if [[ -z "$current" ]]; then
    local dirs
    dirs=()
    #{- if index . "org"}#
    if [[ -d "$HOME/#{ .org.slug }#" ]]; then
      dirs+=("$HOME/#{ .org.slug }#"/ws-*/*)
    fi
    #{- end }#
    if [[ -d "$HOME/src" ]]; then
      dirs+=("$HOME/src"/ws-*/*)
    fi

    _fzf_complete --multi --reverse --prompt="workspace> " -- "$@" < \
      <(printf '%s\n' "${dirs[@]}")
  else
    local locals
    locals="$(command git for-each-ref \
      --sort=-committerdate \
      --format='%(refname:lstrip=2)' \
      refs/heads/)"

    _fzf_complete --multi --reverse --prompt="branch> " -- "$@" < \
      <(echo -e "$locals" | grep -v HEAD | grep -v "$current")
  fi
}

function _fzf_complete_ws() {
  _fzf_complete_workspace "$@"
}

function _fzf_complete_w() {
  _fzf_complete_workspace "$@"
}

# General aliases

alias c='cd'
alias e='nvim'
alias g='git'
alias l='ls'
alias w='workspace'
alias ws='workspace'

function _warn_fvm_config_not_found() {
  # shellcheck disable=SC2034
  local errorcode=$?
  echo -e "\n\e[33m\e[1mWARN:\e[0m\e[33m FVM configuration not found in current directory. Did you forget to run \`fvm use <version>\`?\e[0m"
  # shellcheck disable=SC2152
  return errorcode
}

function dart() {
  if [[ ! -f "$PWD/.fvm/fvm_config.json" ]]; then
    command dart "$@"
    _warn_fvm_config_not_found
  else
    fvm dart "$@"
  fi
}

function flutter() {
  if [[ ! -f "$PWD/.fvm/fvm_config.json" ]]; then
    command flutter "$@"
    _warn_fvm_config_not_found
  else
    fvm flutter "$@"
  fi
}

function gh() {
  if ! command gh extension list | grep gh-dash >/dev/null; then
    command gh extension install dlvhdr/gh-dash
  fi

  command gh "$@"
}

# Config aliases

function ce() {
  pushd ~/.local/share/chezmoi >/dev/null && nvim && popd >/dev/null || return $?
}

# Git aliases

alias gb='git branch'
alias gp='git pu'
alias gs='git st'
alias gu='git pull'

function ga() {
  if [[ $# -eq 0 ]]; then
    command git ls-files --deleted --modified --other --exclude-standard \
      | fzf -0 -m \
        --preview 'command git diff --color=always {-1}' \
        --bind 'enter:become(command git add {+})'

    git st
  else
    git add "$@"
  fi
}

function gc() {
  # shellcheck disable=1091
  source "$HOME/.dotfiles/scripts/git-commit-message"
}

function ge() {
  if [[ $# -eq 0 ]]; then
    command git log --format='%h %s' \
      | fzf -0 \
        --preview "git show --color=always \$(echo {} | cut -d' ' -f1)" \
        --bind "enter:become(command git rb \$(echo {} | cut -d' ' -f1))"
  else
    git rb "$@"
  fi
}

function gr() {
  if [[ $# -eq 0 ]]; then
    command git diff --name-only --staged \
      | fzf -0 -m \
        --preview 'command git diff --color=always --staged {-1}' \
        --bind 'enter:become(command git rss {+})'

    git st
  else
    git rss "$@"
  fi
}

function gt() {
  command git stash list \
    | fzf -0 \
      --preview "command git show --pretty=oneline --color=always --patch \"\$(echo {} | cut -d: -f1)\"" \
      --bind "enter:become(command git sap \$(echo {} | cut -d: -f1))"

  git st
}

function gw() {
  if [[ $# -eq 0 ]]; then
    command git branch \
      | grep -v '^[*+]' \
      | awk '{print $1}' \
      | fzf -0 \
        --preview 'git show --color=always {-1}' \
        --bind 'enter:become(command git sw {})'

    git st
  else
    git sw "$@"
  fi
}

if [[ -n "$START_COMMAND" ]]; then
  _silent_background "$START_COMMAND"

  command cat "$HOME/.dotfiles/banner.txt"
fi

# vim: filetype=sh
