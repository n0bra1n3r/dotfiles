#!/usr/bin/env bash
# chezmoi:template:left-delimiter="#{" right-delimiter="}#"

printf '\033[?12l' # disable cursor blink

export HISTSIZE=10000

if [ ! -z "$STARSHIP_CONFIG" ]; then
  export STARSHIP_CONFIG="$(eval echo "$STARSHIP_CONFIG")"
fi

function cygpath() {
  if [[ "$OS" == *_NT* ]]; then
    command cygpath "$@"
  else
    for last in "$@"; do :; done
    echo "$last"
  fi
}

function _git_override() {
  if [[ "$1" == "config" && "$@" != *"--help"* ]]; then
    shift 1
    command git cf "$@"
  else
    command git "$@"
  fi
}

function _silent_background() {
  ("$@" &>/dev/null &)
}

if [ ! -z "$NVIM" ]; then
  export EDITOR="$HOME/.dotfiles/scripts/nvim-nested"

  function _nvim_remote() {
    command nvim --clean --headless --server "$NVIM" "$@"
  }

  function _load_nvim_env() {
    local env="$(_nvim_remote \
      --remote_expr "v:lua.get_my_config_json('env')" 2>&1)"
    if [[ "$env" != "null" ]]; then
      env="$(printf "%s" "$env" \
        | jq -r "to_entries[] | \"\\(.key)='\\(.value)'\"")"
      local old_path="$PATH"
      eval export $env
      local new_path="$PATH"
      export PATH="$old_path"
      export PATH=$(cygpath -pu "$new_path")
    fi
  }

  function cd() {
    builtin cd "$@"
    local exit_code=$?
    local dir="$(cygpath -m "$PWD")"
    _silent_background _nvim_remote --remote-expr "v:lua.fn.set_terminal_dir(\"$dir\")"
    return exit_code
  }

  function git() {
    _git_override "$@"
    local exit_code=$?
    _silent_background _nvim_remote --remote-expr "v:lua.fn.refresh_git_info()"
    return exit_code
  }

  function nvim() {
    if [ $# -eq 0 ]; then
      local dir="$(cygpath -m "$PWD")"
      _nvim_remote --remote-expr "v:lua.fn.open_workspace(\"$dir\")" &>/dev/null
      local exit_code=$?
      _load_nvim_env
      return exit_code
    else
      local opts="$@"
      while [ $# -gt 0 ]; do
        case "$1" in
        -h|--help)
          printf "Usage:\n  nvim [file]\tEdit file\n"
          return
          ;;
        -v|--version)
          command nvim --version
          return
          ;;
        *)
          shift
          ;;
        esac
      done
      _nvim_remote --remote-expr "v:lua.fn.open_tab(\"$opts\")" &>/dev/null
      local exit_code=$?
      _load_nvim_env
      return exit_code
    fi
  }

  function workspace() {
    source "$HOME/.dotfiles/scripts/workspace"
    nvim
  }

  function exit() {
    _nvim_remote --remote-send "<cmd>quitall<CR>"
  }
else
  export EDITOR="nvim"

  function git() {
    _git_override "$@"
  }

  function nvim() {
    if [ $# -eq 0 ]; then
      command nvim +"TerminalModeStart nvim"
    else
      command nvim "$@"
    fi
  }

  function workspace() {
    source "$HOME/.dotfiles/scripts/workspace"
  }
fi

function git_ticket() {
  local branch="$(git branch --show-current)"
  if [[ -z "$branch" ]]; then
    printf ''
  else
    printf "$branch" | \
      grep -Eo '^(\w+/)?(\w+[-_])?[0-9]+' | \
      grep -Eo '(\w+[-])?[0-9]+' | \
      tr "[:lower:]" "[:upper:]"
  fi
}

# General aliases

alias c='cd'
alias cat='bat'

function dart() {
  if [[ ! -f "$PWD/.fvm/fvm_config.json" ]]; then
    command dart "$@"
    local exit_code=$?
    echo -e "\n\e[33m\e[1mWARN:\e[0m\e[33m FVM configuration not found. Did you forget to run \`fvm use <version>\`?\e[0m"
    return exit_code
  else
    fvm dart "$@"
  fi
}

alias e='nvim'

function flutter() {
  if [[ ! -f "$PWD/.fvm/fvm_config.json" ]]; then
    command flutter "$@"
    local exit_code=$?
    echo -e "\n\e[33m\e[1mWARN:\e[0m\e[33m FVM configuration not found. Did you forget to run \`fvm use <version>\`?\e[0m"
    return exit_code
  else
    fvm flutter "$@"
  fi
}

alias g='git'
alias l='ls'
alias vim='nvim'
alias w='workspace'
alias ws='workspace'

# Config aliases

alias ce='cd ~/.local/share/chezmoi && nvim'

# Git aliases

function ga() {
  git add -N "*$@*" && git ap "*$@*"
}

function gc() {
  local tick="$(git_ticket)"
  local type="$1"

  if [[ ! -z "$type" ]]; then
    local bad_type=false
    case "$1" in
    b|bu|bui|buil|build) type=build ;;
    ch|cho|chor|chore) type=chore ;;
    ci) type=ci ;;
    d|do|doc|docs) type=docs ;;
    fe|fea|feat) type=feat ;;
    fi|fix) type=fix ;;
    p|pe|per|perf) type=perf ;;
    ref|refa|refac|refact|refacto|refactor) type=refactor ;;
    rev|reve|rever|revert) type=revert ;;
    s|st|sty|styl|style) type=style ;;
    t|te|tes|test) type=test ;;
    *) bad_type=true ;;
    esac
    shift

    local message="$@"

    if [[ $bad_type == true ]]; then
      git cm "$type $message"
      local exit_code=$?

      if [[ ! -z "$tick" ]]; then
        local info_msg="\n* types: build chore docs feat fix perf refactor revert style test"
        echo -e "\n\e[33m\e[1mWARN:\e[0m\e[33m unknown commit type '$type'$info_msg\e[0m"
      fi
      return exit_code
    else
      local prefix="$type($tick)"

      if [[ -z "$tick" || "$type" == "$prefix" ]]; then
        git cm "$type: $message"
      else
        git cm "$prefix: $message"
      fi
    fi
  else
    git cm "chore($tick): " -e
  fi
}

alias gl='tig log'
alias go='git cf'
alias gp='git pu'

function gr() {
  git rs "*$@*"
}

function grs() {
  git rss "*$@*"
}

alias gs='git st'
alias gu='git pull'
alias gw='git sw'

#{- if eq .chezmoi.os "windows" }#
alias npm="cmd -c npm.cmd"
#{- else if eq .chezmoi.os "darwin" }#
alias pip="pip3"
alias python="python3"
alias studio="open -a /Applications/Android\ Studio.app"
#{- end }#

# vim: filetype=bash
